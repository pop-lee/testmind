<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="120" height="30" 
    horizontalGap="0" 
    paddingTop="0" paddingBottom="0" 
    mouseDown="mouseDownHandle(event)"
    mouseMove="mouseMoveHandle(event)"
    mouseUp="mouseUpHandle(event)"
    mouseOver="mouseOverHandle(event)"
    mouseOut="mouseOutHandle(event)" 
    remove="{mainModel.main.removeChild(_linkLine)}"
    creationComplete="creaHandle()" 
    borderColor="0xff0000" borderStyle="none"
    horizontalScrollPolicy="off" verticalScrollPolicy="off"
    backgroundColor="0xffffff" backgroundAlpha="1" >
    <mx:Script source="NodeDrag.as" />
    <mx:Script source="NodeMouse.as" />
    <mx:Script source="NodeFocus.as" />
    <mx:Script source="NodeKeyboard.as" />
    <mx:Script>
        <![CDATA[
            import flash.debugger.enterDebugger;
            
            import library.line.LinkLine;
            
            import model.MindModel;
            
            import mx.collections.ArrayCollection;
            import mx.core.Application;
            import mx.events.CollectionEvent;
            
            private var mainModel : MindModel = MindModel.getInstance();
            
            [Bindable]
            public var nodeContent : String = "";
            
            private var _linkLine : LinkLine = new LinkLine();
            
            //线出端点
            [Bindable]
            private var _pointOut : Point = new Point();
            //线入端点
            [Bindable]
            private var _pointIn : Point = new Point();
            
            //父端点
//            [Bindable]
            private var _parentNode : Node = null;
            
            //子端点
            [Bindable]
            private var _rightChildNodes : ArrayCollection = new ArrayCollection() ;
			private var _leftChildNodes : ArrayCollection = new ArrayCollection();
            
            //子节点总空间
            [Bindable]
            private var _rightChildNodesSpace : Number = 0;
			private var _leftChildNodesSpace : Number = 0;
			
			//折叠的空间
            private var _rightExpandNodesSpace : Number = 0;
			private var _leftExpandNodesSpace : Number = 0;
            
            private var _isExpanding : Boolean = true;
            
            //端点级别
            [Bindable]
            private var _level : int = 0;
            
            //布局当前方向
            private var _direction : String = "right";
			private var _dirFlag : String = "right" ;
            
            //布局标尺
            private var _rRule : Number = 0;
			private var _lRule : Number = 0;
            
            //端点原占用空间
            private var _nodeOldSpace : Number = 0;
            
            //当前节点是否可编辑
            [Bindable]
            public var isEditable : Boolean = false;
            
            /**
             * 节点方向的 set get 方法
             */
            override public function set direction(_direction : String) : void
            {
				_dirFlag = this._direction = _direction;
            }
			override public function get direction():String
			{
//				if(_parentNode._parentNode == null)
					return _direction;
//				else 
//					return _direction = _parentNode._direction;
			}
			
			/**
             * 获取指定方向的折叠子节点的空间
             * @param _direction  要获取折叠子节点的方向
             * @return 返回指定方向的折叠子节点占用的空间
             */
			private function getExpandNodesSpace(_direction : String) : Number
			{
				if(_direction == "right")
					return _rightExpandNodesSpace;
				else if(_direction == "left")
					return _leftExpandNodesSpace;
				else
					throw new Error("this Node not hav direction!");
			}
			
			/**
			 * 设置指定方向的折叠子节点占用的空间
             * @param _expandNodesSpace 折叠子节点所占用的空间
             * @param _direction 折叠子节点的方向
             */
			private function setExpandNodesSpace(_expandNodesSpace : Number , _direction : String) : void
			{
				if(_direction == "right")
					this._rightExpandNodesSpace = _expandNodesSpace;
				else if(_direction == "left")
					this._leftExpandNodesSpace = _expandNodesSpace;
			}
            
            /**
             * 获取子节点占用空间大小
             * @param _direction 要获取的子节点方向
             * @return 返回要获取子节点方向上子节点
             */
            private function getChildNodesSpace(_direction : String) : Number
			{
				if(_direction == "right")
					return _rightChildNodesSpace;
				else if(_direction == "left")
					return _leftChildNodesSpace;
				else
					throw new Error("this Node not hav direction!");
			}
			
			/**
			 * 设置子节点的占用空间
			 * @param _childNodesSpace 子节点占用的空间
			 * @param _direction 子节点方向
			 * 
			 */
			private function setChildNodesSpace(_childNodesSpace : Number,_direction : String) : void
			{
				if(_direction == "right")
					_rightChildNodesSpace = _childNodesSpace;
				else if(_direction == "left")
					_leftChildNodesSpace = _childNodesSpace;
			}
			
			/**
			 * 根据方向获取子节点数组对象
			 * @param _direction 要获取的子节点的方向
			 * @return 返回下一层子节点数组对象
			 */
			private function getChildNodes(_direction : String) : ArrayCollection
			{
				if(_direction == "right")
					return _rightChildNodes
				else if(_direction == "left")
					return _leftChildNodes;
				else
					throw new Error("this Node not hav direction!");
			}
			
            /**
            * 子节点设置父节点的 set get 方法
            */ 
            public function set parentNode(_parentNode : Node) : void
            {
                this._parentNode = _parentNode;
                _parentNode.addChildNode(this);
            }
            public function get parentNode() : Node
            {
                return _parentNode;
            }
            
            /**
            * @return 获得当前节点及其子节点所占用空间
            */
            private function get nodeSpace() : Number
            {
            	return (this.height > this.getChildNodesSpace(_direction)?this.height : this.getChildNodesSpace(_direction));
            }
            
            /**
            * addChildNode(_node : Node) 添加子节点方法
            * @param _node 要添加的子节点对象
            */
            
            private function addChildNode(_node : Node) : void
            {
                _node._level = _level+1;
//                TestMindMap.levelPositionMap.put(

                _node._nodeOldSpace = _node.height;
//                var _obj : Object = new Object();
//                var _linkLine : LinkLine = new LinkLine();
//                _obj.node = _node;
//                _obj.linkLine = _linkLine;
//                MindModel.getInstance().main.addChild(_obj.linkLine);
                MindModel.getInstance().main.addChild(_node._linkLine);
                
				if(_node._direction!=_node._dirFlag) {
					changeDir(_node);
				}
				getChildNodes(_node.direction).addItem(_node);
                
				getChildNodes(_node.direction).length>1? 
					changeChildNodesSpace(_node.nodeSpace + mainModel.nodeSpacing,_node.direction):
					changeChildNodesSpace(_node.nodeSpace,_node.direction);
                
                refresh();
            }
			
			/**
			 * 当子节点改变方向执行
			 * changeDir(_node ： Node) 
			 * @param _node 拖动的子节点
			 */
			private function changeDir(_node : Node) : void
			{
				if(_node._direction == "right") {
					_node.getChildNodes("left").addAll(_node.getChildNodes("right"));
					_node.getChildNodes("right").removeAll();
					_node.setChildNodesSpace(_node.getChildNodesSpace("right"),"left");
					_node.setChildNodesSpace(0,"right");
					_node.setExpandNodesSpace(_node._rightExpandNodesSpace,"left");
					_node.setExpandNodesSpace(0,"right");
					_node.direction = "left";
				} else if(_node._direction == "left") {
					_node.getChildNodes("right").addAll(_node.getChildNodes("left"));
					_node.getChildNodes("left").removeAll();
					_node.setChildNodesSpace(_node.getChildNodesSpace("left"),"right");
					_node.setChildNodesSpace(0,"left");
					_node.setExpandNodesSpace(_node._rightExpandNodesSpace,"right");
                    _node.setExpandNodesSpace(0,"left")
					_node.direction = "right";
				}
				for each(var _tempNode : Node in _node.getChildNodes(_node._direction)) {
					changeDir(_tempNode);
				}
			}
            
            /**
             * 删除指定子节点
             * @param _node 要删除的子节点对象
             */
            public function removeChildNode(_node : Node) : void
            {
				getChildNodes(_node._direction).length>1?
					changeChildNodesSpace(0 - _node.nodeSpace - mainModel.nodeSpacing,_node._direction):
					changeChildNodesSpace(0 - _node.nodeSpace,_node._direction);
                
				getChildNodes(_node._direction).removeItemAt(getChildNodes(_node._direction).getItemIndex(_node));
				if(mainModel.dragNode == null) {
				    mainModel.main.removeChild(_node);
				}
				
                refresh();
            }
            
            //设置所有子节点占用空间大小
            /**
             * 更改子节点占用空间大小
             * @param _nodeSpace 变更占用空间大小
             * @param _direction 变更占用空间大小的方向
             */
            private function changeChildNodesSpace(_nodeSpace : Number,_direction : String) : void
            {
//                if(this.height > _childNodesSpace  + _nodeSpace) {
					setChildNodesSpace(getChildNodesSpace(_direction) + _nodeSpace,_direction);
					var thisChildNodesSpace : Number = getChildNodesSpace(_direction);
                    if(_parentNode != null)
                        if(_nodeSpace > 0) { 
                            if(thisChildNodesSpace - _nodeSpace < height&&thisChildNodesSpace > height)
                                this._parentNode.changeChildNodesSpace(thisChildNodesSpace - height,_direction);
                            else if(thisChildNodesSpace - _nodeSpace >= height)
                                this._parentNode.changeChildNodesSpace(_nodeSpace,_direction);
                        } else {
                            if(thisChildNodesSpace>=height) {
                                this._parentNode.changeChildNodesSpace(_nodeSpace,_direction);
                            } else if(thisChildNodesSpace<height&&thisChildNodesSpace-_nodeSpace>height) {
                                this._parentNode.changeChildNodesSpace(height - (thisChildNodesSpace-_nodeSpace),_direction);
                            }
                        }
                        
//                }
            }
            
            /**
             * 
             */
            private function creaHandle() : void
            {
//                _childNodesSpace = this.nodeSpace;
            }
            
            /**
             * 获取节点连线的出口Point对象
             * @param _direction 要获取连线的方向
             * @return 返回要获取方向的连线出口Point对象
             */
            private function getPointOut(_direction : String) : Point
            {
				if(_direction == "right") {
	                _pointOut.x = this.x + this.width;
	                _pointOut.y = this.y + this.height/2;
				}
				if(_direction == "left") {
					_pointOut.x = this.x;
					_pointOut.y = this.y + this.height/2;
				}
                return _pointOut;
            }
            
            //获取线段入口端点
            /**
             * 获取节点连线的入口Point对象
             * @return 返回要获取方向的连线入口Point对象
             */
            private function getPointIn()  : Point
            {
				if(_direction == "right") {
	                _pointIn.x  = this.x ;
	                _pointIn.y  = this.y + this.height/2;
				}
				if(_direction == "left") {
					_pointIn.x  = this.x + this.width;
					_pointIn.y  = this.y + this.height/2;
				}
                return _pointIn;
            }
            
            /**
             * 更新文本组件的UI
             */
            private function updateTextField() : void
            {
                content.width = (content.textWidth==0?30:content.textWidth) + this.getStyle("fontSize")*3;
                content.height = (content.textHeight==0?13:content.textHeight) + 15;
				this.width = content.width + PButton.width;
//				this.height = content.height + PButton.height;
				
                content.text = content.text;
                content.horizontalScrollPosition = 0;
                
				var thisChildNodesSpace : Number = getChildNodesSpace(_direction);
                if(_parentNode != null)
                    //当子节点占用空间变小
                    if(this.height<_nodeOldSpace) {
                        //如果当前节点高度大于当前节点的子节点空间
                        if(this.height>=thisChildNodesSpace) {
                            this._parentNode.changeChildNodesSpace(this.height - _nodeOldSpace,_direction);
                        //如果当前节点原高度大于子节点占用空间,现在高度小于子节点占用空间
                        } else if(_nodeOldSpace>thisChildNodesSpace&&this.height<thisChildNodesSpace) {
                            this._parentNode.changeChildNodesSpace(_nodeOldSpace - thisChildNodesSpace,_direction);
                        }
                    } else {
                        if(_nodeOldSpace>=thisChildNodesSpace) {
                            this._parentNode.changeChildNodesSpace(this.height - _nodeOldSpace,_direction);
                        } else if(_nodeOldSpace<thisChildNodesSpace&&this.height>thisChildNodesSpace) {
                            this._parentNode.changeChildNodesSpace(this.height - thisChildNodesSpace,_direction);
                        }
                    }
                _nodeOldSpace = this.height;
                refresh();
            }
            
            //隐藏节点执行
            /**
             * 隐藏节点操作
             * @param _childNodes 要折叠的子节点对象数组
             * @param _isHiden 是是否折叠 若为true 则执行展开操作 若为false 则执行折叠操作
             */
            private function hideNodeHandle(_childNodes : ArrayCollection,_isHiden : Boolean) : void
            {
                for each(var _node : Node in _childNodes) {
                        _node.visible = _node.includeInLayout = _isHiden;
                        _node._linkLine.visible = _node._linkLine.includeInLayout = _isHiden;
                    if(_node._isExpanding) 
                        hideNodeHandle(_node.getChildNodes(_node._direction),_isHiden);
                }
            }
            
            /**
             * 重新刷新全局页面
             */
            private function refresh() : void
            {
                TestMindMap.mainNode.refreshLine();
            }
            
            /**
             * 
             */
            public function updateUI() : void
            {
                
//                if(_parentNode != null) {
//                    this.x = this._parentNode.x + this._parentNode.width + TestMindMap.parentSpacing;
//                    this.y = this._parentNode.y + this._parentNode.height/2 - this._parentNode._childNodesSpace/2 + this._parentNode._rule ;
//                    _parentNode._rule = _parentNode._rule + this.height + TestMindMap.nodeSpacing;
//                }
//                _node.x = this.x + this.width + TestMindMap.parentSpacing;
//                _node.y = this.y + this.height/2 - this._childNodesSpace/2 + _rule + _node.height/2;
            }
            
            //作为父Node画线
            /**
             * 重新画线操作
             */
            public function refreshLine() : void
            {
				_lRule = -_leftChildNodesSpace/2;
                _rRule = -_rightChildNodesSpace/2;
                for each(var _rNode : Node in _rightChildNodes)
                {
                    _rNode.x = this.x + this.width + mainModel.parentSpacing;
                    _rNode.y = this.y + this.height/2 + this._rRule + _rNode.nodeSpace/2 - _rNode.height/2 ;
                    _rRule = _rRule + _rNode.nodeSpace + mainModel.nodeSpacing;
                    
                    _rNode._linkLine.startPoint = getPointOut(_rNode._direction);
                    
                    _rNode._linkLine.endPoint = _rNode.getPointIn();
//                    this.dispatchEvent(pointMove);
                    _rNode._linkLine.drawLine();
                    _rNode.refreshLine();
				}
				_rRule = 0;
				for each(var _lNode : Node in _leftChildNodes) {
					_lNode.x = this.x - _lNode.width - mainModel.parentSpacing;
					_lNode.y = this.y + this.height/2 + this._lRule + _lNode.nodeSpace/2 - _lNode.height/2 ;
					_lRule = _lRule + _lNode.nodeSpace + mainModel.nodeSpacing;
					
					_lNode._linkLine.startPoint = getPointOut(_lNode._direction);
					
					_lNode._linkLine.endPoint = _lNode.getPointIn();
//                    this.dispatchEvent(pointMove);
					_lNode._linkLine.drawLine();
					_lNode.refreshLine();
                }
                _lRule = 0;
            }
            
        ]]>
    </mx:Script>
    <mx:TextArea id="content" editable="{isEditable}" selectable="{isEditable}" text="{nodeContent}" width="100%" height="100%"
        paddingTop="5" creationComplete="updateTextField()" keyUp="keyUpHandle(event)" keyDown="keyDownHandle(event)"
        textInput="textInputHandle(event)"
        doubleClickEnabled="true" doubleClick="{this.isEditable = true}" backgroundAlpha="0"
        change="updateTextField()" wordWrap="false" textAlign="center"
        horizontalScrollPolicy="off"
        focusOut="focusOutHandle()" />
    <mx:LinkButton id="PButton" label="+" click="expandNodeHandle(_direction)" width="26" height="26" icon="@Embed(source='/assets/add.png')" />
</mx:HBox>
